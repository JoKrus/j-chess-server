on:
  push:
    branches:
      - master

name: Create Release

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
          architecture: x64
      - run: python3 -m pip install --user packaging

      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@master"

      - name: check if version newer
        id: version_stuff
        run: |
          export CUR_VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.version -q -DforceStdout 2>/dev/null)
          export CUR_VERSION=$(python3 -c "from datetime import datetime; print(str('$CUR_VERSION').replace('SNAPSHOT', datetime.now().strftime('%Y%m%d-%H%M%S')))")
          export VERSION_NEWER=$(python3 -c "from packaging.version import parse as parse_version; import sys; sys.stdout.write(str(parse_version(str('$CUR_VERSION').lstrip('v')) > parse_version(str('${{ steps.previoustag.outputs.tag }}').lstrip('v'))).lower())")
          export VERSION_PRERELEASE=$(python3 -c "from packaging.version import parse as parse_version; import sys; sys.stdout.write(str(parse_version(str('$CUR_VERSION').lstrip('v')) < parse_version('1.0.0')).lower())")
          echo "Last version: ${{ steps.previoustag.outputs.tag }}"
          echo "Current version: $CUR_VERSION"
          echo "Version is newer: $VERSION_NEWER"
          echo "Version is prerelease: $VERSION_PRERELEASE"
          echo ::set-output name=VERSION_NEWER::$VERSION_NEWER
          echo ::set-output name=VERSION_PRERELEASE::$VERSION_PRERELEASE
          echo ::set-output name=VERSION_CURRENT::$CUR_VERSION

      - name: Create Release
        if: steps.version_stuff.outputs.VERSION_NEWER == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_WORKFLOW }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ steps.version_stuff.outputs.VERSION_CURRENT }}
          release_name: Release ${{ steps.version_stuff.outputs.VERSION_CURRENT }}
          body: |
            This Release is made automatically.
            Some things have changed and a new version was set in the pom, so obviously a new release had to be done.
          draft: false
          prerelease: ${{ steps.version_stuff.outputs.VERSION_PRERELEASE }}
